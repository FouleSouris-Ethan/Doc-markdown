{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Projet Cyna Introduction Ce site web \u00e9cris en markdown a pour but de documenter les r\u00e9alisations men\u00e9 durant le projet. Bonnes pratiques DevSecOps Kubernetes Prometeus/Grafana ElasticSearch GitLab Workflow Git Contexte du Projet L'entreprise Cyna pr\u00e9voit de moderniser ses infrastructures informatiques lors de son d\u00e9m\u00e9nagement \u00e0 Gen\u00e8ve. Ce projet vise \u00e0 int\u00e9grer des solutions technologiques avanc\u00e9es pour am\u00e9liorer la s\u00e9curit\u00e9 et l'optimisation des performances tout en garantissant la continuit\u00e9 des services. L'objectif est de r\u00e9pondre aux besoins croissants de l'entreprise et de ses clients dans un environnement dynamique. Ma partie est consacr\u00e9 a la philosophie DevOps. Dans ce contexte-ci je dois r\u00e9aliser certaines choses : R\u00f4les et Responsabilit\u00e9s de l'Ing\u00e9nieur DevOps Infrastructure as Code (IaC) : Utilisation de Terraform pour g\u00e9rer les environnements cloud, justification des choix et architecture associ\u00e9e. Gestion des Configurations : Cr\u00e9er et maintenir un repository GIT pour centraliser les fichiers de configuration et les scripts d'automatisation. Int\u00e9gration Continue : Mettre en place des pipelines CI/CD pour automatiser les tests et le d\u00e9ploiement des applications. Automatisation des Incidents : D\u00e9velopper des solutions d'automatisation pour la gestion des incidents. Monitoring et Alertes : Impl\u00e9menter des solutions de monitoring (Prometheus, Grafana) pour assurer la surveillance en temps r\u00e9el des syst\u00e8mes. Plan de Reprise d'Activit\u00e9 (PRA) : Int\u00e9grer un PRA pour la restauration rapide des configurations IaC et des syst\u00e8mes en cas de d\u00e9faillance. Documentation : R\u00e9diger et maintenir la documentation technique relative aux infrastructures et aux processus d'automatisation. Serveurs \u00e0 Mettre en Place Serveurs SOC (Security Operations Center): Le SOC de Cyna sera l'\u00e9pine dorsale de la s\u00e9curit\u00e9 des infrastructures des clients. Il devra \u00eatre h\u00e9berg\u00e9 sur une infrastructure redondante et haute performance. Serveurs Web (Site SaaS): L\u2019infrastructure h\u00e9bergeant le site SaaS de Cyna, utilis\u00e9 par les clients pour g\u00e9rer leurs infrastructures de s\u00e9curit\u00e9 et l\u2019achat de nouveaux services, sera optimis\u00e9e pour la haute disponibilit\u00e9, la scalabilit\u00e9, et la s\u00e9curit\u00e9 via le SOC. Le site SaaS est compos\u00e9 de 4 vm bas\u00e9 sous linux avec l'int\u00e9gration d'Azure load balancer. Orchestration des ressources se fera via Kubernetes. Vue qu'il \u00e9tait sug\u00e9r\u00e9 de mettre en place 4 vm, le probl\u00e8me du \"split brain\" se pose pour kubernetes. Celui-ci survient survient dans les syst\u00e8mes distribu\u00e9s lorsque les n\u0153uds d'un cluster perdent la communication entre eux et continuent \u00e0 fonctionner sans savoir ce que font les autres. Cela peut entra\u00eener des donn\u00e9es incoh\u00e9rentes, des d\u00e9cisions contradictoires ou des interruptions de service. Le probl\u00e8me se pose seulement pour des clusters. Donc mes 4 vm ne sont pas impact\u00e9 vue qu'elles fonctionnent de mani\u00e8re ind\u00e9pendante, sans besoin de quorum. Pour r\u00e9gler le probl\u00e8me du split brain, on peut penser a mettre un nombre impairs de serveurs. Ici, je vais utiliser un control plane g\u00e9r\u00e9 par Azure, \"AKS\". Mes 4 vm seront ainsi des worker Nodes et AKS s'occupe d'\u00eatre le master. APPLICATIONS COMPTABLE: L\u2019h\u00e9bergement de l\u2019application comptable se fera sur un serveur d\u00e9di\u00e9 dans le cloud (IaaS) o\u00f9 une base de donn\u00e9es Oracle derni\u00e8re version sera install\u00e9e. APPLICATIONS DE GESTION DE LA TR\u00c9SORERIE: Cette application sera h\u00e9berg\u00e9e dans le cloud via un serveur d\u00e9di\u00e9 (IaaS) ou un service de base de donn\u00e9es dans le cloud (PaaS ou SaaS)","title":"Home"},{"location":"#projet-cyna","text":"","title":"Projet Cyna"},{"location":"#introduction","text":"Ce site web \u00e9cris en markdown a pour but de documenter les r\u00e9alisations men\u00e9 durant le projet. Bonnes pratiques DevSecOps Kubernetes Prometeus/Grafana ElasticSearch GitLab Workflow Git","title":"Introduction"},{"location":"#contexte-du-projet","text":"L'entreprise Cyna pr\u00e9voit de moderniser ses infrastructures informatiques lors de son d\u00e9m\u00e9nagement \u00e0 Gen\u00e8ve. Ce projet vise \u00e0 int\u00e9grer des solutions technologiques avanc\u00e9es pour am\u00e9liorer la s\u00e9curit\u00e9 et l'optimisation des performances tout en garantissant la continuit\u00e9 des services. L'objectif est de r\u00e9pondre aux besoins croissants de l'entreprise et de ses clients dans un environnement dynamique. Ma partie est consacr\u00e9 a la philosophie DevOps. Dans ce contexte-ci je dois r\u00e9aliser certaines choses :","title":"Contexte du Projet"},{"location":"#roles-et-responsabilites-de-lingenieur-devops","text":"Infrastructure as Code (IaC) : Utilisation de Terraform pour g\u00e9rer les environnements cloud, justification des choix et architecture associ\u00e9e. Gestion des Configurations : Cr\u00e9er et maintenir un repository GIT pour centraliser les fichiers de configuration et les scripts d'automatisation. Int\u00e9gration Continue : Mettre en place des pipelines CI/CD pour automatiser les tests et le d\u00e9ploiement des applications. Automatisation des Incidents : D\u00e9velopper des solutions d'automatisation pour la gestion des incidents. Monitoring et Alertes : Impl\u00e9menter des solutions de monitoring (Prometheus, Grafana) pour assurer la surveillance en temps r\u00e9el des syst\u00e8mes. Plan de Reprise d'Activit\u00e9 (PRA) : Int\u00e9grer un PRA pour la restauration rapide des configurations IaC et des syst\u00e8mes en cas de d\u00e9faillance. Documentation : R\u00e9diger et maintenir la documentation technique relative aux infrastructures et aux processus d'automatisation.","title":"R\u00f4les et Responsabilit\u00e9s de l'Ing\u00e9nieur DevOps"},{"location":"#serveurs-a-mettre-en-place","text":"Serveurs SOC (Security Operations Center): Le SOC de Cyna sera l'\u00e9pine dorsale de la s\u00e9curit\u00e9 des infrastructures des clients. Il devra \u00eatre h\u00e9berg\u00e9 sur une infrastructure redondante et haute performance. Serveurs Web (Site SaaS): L\u2019infrastructure h\u00e9bergeant le site SaaS de Cyna, utilis\u00e9 par les clients pour g\u00e9rer leurs infrastructures de s\u00e9curit\u00e9 et l\u2019achat de nouveaux services, sera optimis\u00e9e pour la haute disponibilit\u00e9, la scalabilit\u00e9, et la s\u00e9curit\u00e9 via le SOC. Le site SaaS est compos\u00e9 de 4 vm bas\u00e9 sous linux avec l'int\u00e9gration d'Azure load balancer. Orchestration des ressources se fera via Kubernetes. Vue qu'il \u00e9tait sug\u00e9r\u00e9 de mettre en place 4 vm, le probl\u00e8me du \"split brain\" se pose pour kubernetes. Celui-ci survient survient dans les syst\u00e8mes distribu\u00e9s lorsque les n\u0153uds d'un cluster perdent la communication entre eux et continuent \u00e0 fonctionner sans savoir ce que font les autres. Cela peut entra\u00eener des donn\u00e9es incoh\u00e9rentes, des d\u00e9cisions contradictoires ou des interruptions de service. Le probl\u00e8me se pose seulement pour des clusters. Donc mes 4 vm ne sont pas impact\u00e9 vue qu'elles fonctionnent de mani\u00e8re ind\u00e9pendante, sans besoin de quorum. Pour r\u00e9gler le probl\u00e8me du split brain, on peut penser a mettre un nombre impairs de serveurs. Ici, je vais utiliser un control plane g\u00e9r\u00e9 par Azure, \"AKS\". Mes 4 vm seront ainsi des worker Nodes et AKS s'occupe d'\u00eatre le master. APPLICATIONS COMPTABLE: L\u2019h\u00e9bergement de l\u2019application comptable se fera sur un serveur d\u00e9di\u00e9 dans le cloud (IaaS) o\u00f9 une base de donn\u00e9es Oracle derni\u00e8re version sera install\u00e9e. APPLICATIONS DE GESTION DE LA TR\u00c9SORERIE: Cette application sera h\u00e9berg\u00e9e dans le cloud via un serveur d\u00e9di\u00e9 (IaaS) ou un service de base de donn\u00e9es dans le cloud (PaaS ou SaaS)","title":"Serveurs \u00e0 Mettre en Place"},{"location":"about/","text":"Les bonnes pratiques de documentation Maintenir une documentation de haute qualit\u00e9 en DevOps n\u00e9cessite l\u2019adoption de bonnes pratiques. Voici des exemples issue de ce site . Maintenance r\u00e9guli\u00e8re La maintenance r\u00e9guli\u00e8re de la documentation est essentielle. Les syst\u00e8mes, les configurations et les processus en DevOps \u00e9voluent constamment. Il est donc indispensable de mettre \u00e0 jour la documentation pour refl\u00e9ter ces changements. Assignez la responsabilit\u00e9 de la mise \u00e0 jour de la documentation \u00e0 des membres de l\u2019\u00e9quipe afin de garantir que les informations restent \u00e0 jour. Pr\u00e9voyez des r\u00e9visions p\u00e9riodiques pour vous assurer que la documentation reste pr\u00e9cise. Utilisation de captures d\u2019\u00e9cran Les captures d\u2019\u00e9cran peuvent grandement am\u00e9liorer la compr\u00e9hension de la documentation. Lorsque vous d\u00e9crivez des interfaces utilisateur, des configurations ou des \u00e9tapes de processus, incluez des captures d\u2019\u00e9cran pour illustrer visuellement ce que vous d\u00e9crivez. Assurez-vous que les captures d\u2019\u00e9cran sont claires et bien annot\u00e9es pour que les lecteurs puissent les interpr\u00e9ter facilement. Feedback des utilisateurs Encouragez les utilisateurs de la documentation \u00e0 fournir des commentaires et des retours. Cr\u00e9ez des m\u00e9canismes de r\u00e9troaction, tels que des formulaires de commentaires ou des canaux de communication, pour que les utilisateurs puissent signaler des erreurs, poser des questions ou sugg\u00e9rer des am\u00e9liorations. Les retours des utilisateurs sont pr\u00e9cieux pour identifier les lacunes de la documentation et les domaines qui n\u00e9cessitent des clarifications. Normes de r\u00e9daction \u00c9tablissez des normes de r\u00e9daction pour maintenir la coh\u00e9rence dans votre documentation. D\u00e9finissez des directives sur la mani\u00e8re de nommer les sections, de formater le texte, d\u2019utiliser la terminologie et d\u2019autres aspects. Une documentation coh\u00e9rente est plus facile \u00e0 suivre et \u00e0 comprendre pour l\u2019ensemble de l\u2019\u00e9quipe. Automatisation de la g\u00e9n\u00e9ration de la documentation Si possible, automatisez la g\u00e9n\u00e9ration de la documentation avec MkDocs avec un pipeline CI/CD. Par exemple, configurez des scripts pour extraire automatiquement des informations \u00e0 partir de sources de donn\u00e9es, de syst\u00e8mes ou de fichiers de configuration pour les inclure dans la documentation. Cela r\u00e9duit la charge de travail manuelle et minimise les risques d\u2019erreur humaine.","title":"Bonnes-pratiques"},{"location":"about/#les-bonnes-pratiques-de-documentation","text":"Maintenir une documentation de haute qualit\u00e9 en DevOps n\u00e9cessite l\u2019adoption de bonnes pratiques. Voici des exemples issue de ce site .","title":"Les bonnes pratiques de documentation"},{"location":"about/#maintenance-reguliere","text":"La maintenance r\u00e9guli\u00e8re de la documentation est essentielle. Les syst\u00e8mes, les configurations et les processus en DevOps \u00e9voluent constamment. Il est donc indispensable de mettre \u00e0 jour la documentation pour refl\u00e9ter ces changements. Assignez la responsabilit\u00e9 de la mise \u00e0 jour de la documentation \u00e0 des membres de l\u2019\u00e9quipe afin de garantir que les informations restent \u00e0 jour. Pr\u00e9voyez des r\u00e9visions p\u00e9riodiques pour vous assurer que la documentation reste pr\u00e9cise.","title":"Maintenance r\u00e9guli\u00e8re"},{"location":"about/#utilisation-de-captures-decran","text":"Les captures d\u2019\u00e9cran peuvent grandement am\u00e9liorer la compr\u00e9hension de la documentation. Lorsque vous d\u00e9crivez des interfaces utilisateur, des configurations ou des \u00e9tapes de processus, incluez des captures d\u2019\u00e9cran pour illustrer visuellement ce que vous d\u00e9crivez. Assurez-vous que les captures d\u2019\u00e9cran sont claires et bien annot\u00e9es pour que les lecteurs puissent les interpr\u00e9ter facilement.","title":"Utilisation de captures d\u2019\u00e9cran"},{"location":"about/#feedback-des-utilisateurs","text":"Encouragez les utilisateurs de la documentation \u00e0 fournir des commentaires et des retours. Cr\u00e9ez des m\u00e9canismes de r\u00e9troaction, tels que des formulaires de commentaires ou des canaux de communication, pour que les utilisateurs puissent signaler des erreurs, poser des questions ou sugg\u00e9rer des am\u00e9liorations. Les retours des utilisateurs sont pr\u00e9cieux pour identifier les lacunes de la documentation et les domaines qui n\u00e9cessitent des clarifications.","title":"Feedback des utilisateurs"},{"location":"about/#normes-de-redaction","text":"\u00c9tablissez des normes de r\u00e9daction pour maintenir la coh\u00e9rence dans votre documentation. D\u00e9finissez des directives sur la mani\u00e8re de nommer les sections, de formater le texte, d\u2019utiliser la terminologie et d\u2019autres aspects. Une documentation coh\u00e9rente est plus facile \u00e0 suivre et \u00e0 comprendre pour l\u2019ensemble de l\u2019\u00e9quipe.","title":"Normes de r\u00e9daction"},{"location":"about/#automatisation-de-la-generation-de-la-documentation","text":"Si possible, automatisez la g\u00e9n\u00e9ration de la documentation avec MkDocs avec un pipeline CI/CD. Par exemple, configurez des scripts pour extraire automatiquement des informations \u00e0 partir de sources de donn\u00e9es, de syst\u00e8mes ou de fichiers de configuration pour les inclure dans la documentation. Cela r\u00e9duit la charge de travail manuelle et minimise les risques d\u2019erreur humaine.","title":"Automatisation de la g\u00e9n\u00e9ration de la documentation"},{"location":"devsecops/","text":"Outils pour DevSecOps Outils de surveillance et de gestion des vuln\u00e9rabilit\u00e9s : Snyk : Aide \u00e0 d\u00e9tecter et \u00e0 corriger les vuln\u00e9rabilit\u00e9s dans les d\u00e9pendances open-source et les conteneurs. Aqua Security : Sp\u00e9cialis\u00e9 dans la s\u00e9curit\u00e9 des conteneurs et des environnements cloud-native. Outils de s\u00e9curit\u00e9 des conteneurs : Docker Bench for Security : Un script qui v\u00e9rifie les bonnes pratiques de s\u00e9curit\u00e9 pour les d\u00e9ploiements Docker. Kubernetes Security Posture Management (KSPM) : Outils comme Aqua Security qui surveillent et s\u00e9curisent les clusters Kubernetes. Outils de tests de s\u00e9curit\u00e9 int\u00e9gr\u00e9s : OWASP ZAP : Un outil open-source pour trouver les vuln\u00e9rabilit\u00e9s de s\u00e9curit\u00e9 dans les applications web. SonarQube : Effectue des analyses de code statiques pour d\u00e9tecter les bugs, les vuln\u00e9rabilit\u00e9s et les dettes techniques.","title":"DevSecOps"},{"location":"devsecops/#outils-pour-devsecops","text":"","title":"Outils pour DevSecOps"},{"location":"devsecops/#outils-de-surveillance-et-de-gestion-des-vulnerabilites","text":"Snyk : Aide \u00e0 d\u00e9tecter et \u00e0 corriger les vuln\u00e9rabilit\u00e9s dans les d\u00e9pendances open-source et les conteneurs. Aqua Security : Sp\u00e9cialis\u00e9 dans la s\u00e9curit\u00e9 des conteneurs et des environnements cloud-native.","title":"Outils de surveillance et de gestion des vuln\u00e9rabilit\u00e9s :"},{"location":"devsecops/#outils-de-securite-des-conteneurs","text":"Docker Bench for Security : Un script qui v\u00e9rifie les bonnes pratiques de s\u00e9curit\u00e9 pour les d\u00e9ploiements Docker. Kubernetes Security Posture Management (KSPM) : Outils comme Aqua Security qui surveillent et s\u00e9curisent les clusters Kubernetes.","title":"Outils de s\u00e9curit\u00e9 des conteneurs :"},{"location":"devsecops/#outils-de-tests-de-securite-integres","text":"OWASP ZAP : Un outil open-source pour trouver les vuln\u00e9rabilit\u00e9s de s\u00e9curit\u00e9 dans les applications web. SonarQube : Effectue des analyses de code statiques pour d\u00e9tecter les bugs, les vuln\u00e9rabilit\u00e9s et les dettes techniques.","title":"Outils de tests de s\u00e9curit\u00e9 int\u00e9gr\u00e9s :"},{"location":"elastic/","text":"ElasticSearch Gestion des logs","title":"ElasticSearch"},{"location":"elastic/#elasticsearch","text":"","title":"ElasticSearch"},{"location":"elastic/#gestion-des-logs","text":"","title":"Gestion des logs"},{"location":"gitlab/","text":"Doc pour Gitlab Note a moi m\u00eame: Premier repos avec pipeline du sysadmin/devOps pour cr\u00e9er et g\u00e9rer l'infrastructure avec terreform/ansible par exemple. Les devs vont ensuite d\u00e9ployer leurs applis sur un autre repos en pipeline sur l'infra. Cr\u00e9ation de compte GitLab ici Le pipeline est d\u00e9crit dans le fichier .gitlab-ci.yml , dans le repo, il contient des stages, qui contiennent eux des jobs. Runners : Serveurs qui vont servir a ex\u00e9cuter les pipelines. Les artifacts : Un artifact peut contenir des fichiers et/ou dossiers qui vont \u00eatre stock\u00e9s au sein des pipelines pour \u00eatre utilis\u00e9 par d\u2019autres taches. Les Jobs T\u00e2ches qui vont \u00eatre ex\u00e9cut\u00e9es en parall\u00e8le dans un stage . On retrouve dans un job: Des images docker appropri\u00e9es pour chaque job. Des scripts (commandes) qui vont \u00eatre ex\u00e9cut\u00e9es dans le conteneur docker. Des services, qui vont \u00eatre lanc\u00e9 en parall\u00e8le du job. Param\u00e8tres utiles: When : Quand le job va \u00eatre d\u00e9clanch\u00e9 ? ex: on_success (par d\u00e9faut), on_failure, always, manual. branches : Sur quelle branche le job va \u00eatre d\u00e9clanch\u00e9. (D\u00e9faut: n'importes quels branches) only : Sur quel \u00e9v\u00e9nement le job va \u00eatre d\u00e9clanch\u00e9. ex: push, merge_request, tag. except : Sur quel \u00e9v\u00e9nement le job ne va pas \u00eatre d\u00e9clanch\u00e9. variable : Les variables d'environnement qui vont \u00eatre inject\u00e9es dans le job. Dans gitlab, on les retrouve dans Settings > CI/CD > Variables. Fichier .gitlab.ci.yml L'ordre du stage est important. On vient d'abord d\u00e9clarer les stages: stages: - test - build - deploy Ensuite les jobs : Nom du job: stage: nom du stage (le premier (test)) image: nom de l'image docker script: - les commandes Ainsi de suite. On met le when a la fin CI/CD (Continuous Integration / Continuous Deployment) Le Continuous Integration (CI), ou int\u00e9gration continue, est une pratique cl\u00e9 du DevOps qui vise \u00e0 automatiser l\u2019int\u00e9gration du code source dans un d\u00e9p\u00f4t central. \u00c0 chaque modification, le code est test\u00e9 et valid\u00e9 avant d\u2019\u00eatre fusionn\u00e9, garantissant ainsi une base de code toujours fonctionnelle. Fonctionnement du Continuous Integration L\u2019id\u00e9e du CI est simple : d\u00e8s qu\u2019un d\u00e9veloppeur apporte une modification au code, un processus automatis\u00e9 se d\u00e9clenche pour s\u2019assurer que tout fonctionne correctement. Ce processus comprend g\u00e9n\u00e9ralement : 1.R\u00e9cup\u00e9ration du code : V\u00e9rification des nouvelles modifications depuis le d\u00e9p\u00f4t Git. 2.Compilation et Build : Construction de l\u2019application pour s\u2019assurer qu\u2019elle est fonctionnelle. 3.Ex\u00e9cution des tests : Tests unitaires pour v\u00e9rifier les fonctionnalit\u00e9s isol\u00e9es. Tests d\u2019int\u00e9gration pour s\u2019assurer que les modules fonctionnent ensemble. Tests statiques (linting, analyse de s\u00e9curit\u00e9).x 4.Analyse du code : V\u00e9rification des standards de qualit\u00e9 (ex: SonarQube, ESLint, Pylint). 5.Rapport et feedback : Les r\u00e9sultats sont envoy\u00e9s aux d\u00e9veloppeurs (succ\u00e8s ou \u00e9chec). Test unitaires (Unit Tests) Tr\u00e8s rapide ! : Diff\u00e9rent cas de tests pour chaque fonction, cas bizarre qu\u2019il peut se passer. Ex : Fonction qui divise a par b, que se passe-t'il si a est un une lettre, si a est un 0, que retourne la fonction ?","title":"Gitlab"},{"location":"gitlab/#doc-pour-gitlab","text":"Note a moi m\u00eame: Premier repos avec pipeline du sysadmin/devOps pour cr\u00e9er et g\u00e9rer l'infrastructure avec terreform/ansible par exemple. Les devs vont ensuite d\u00e9ployer leurs applis sur un autre repos en pipeline sur l'infra. Cr\u00e9ation de compte GitLab ici Le pipeline est d\u00e9crit dans le fichier .gitlab-ci.yml , dans le repo, il contient des stages, qui contiennent eux des jobs. Runners : Serveurs qui vont servir a ex\u00e9cuter les pipelines. Les artifacts : Un artifact peut contenir des fichiers et/ou dossiers qui vont \u00eatre stock\u00e9s au sein des pipelines pour \u00eatre utilis\u00e9 par d\u2019autres taches.","title":"Doc pour Gitlab"},{"location":"gitlab/#les-jobs","text":"T\u00e2ches qui vont \u00eatre ex\u00e9cut\u00e9es en parall\u00e8le dans un stage . On retrouve dans un job: Des images docker appropri\u00e9es pour chaque job. Des scripts (commandes) qui vont \u00eatre ex\u00e9cut\u00e9es dans le conteneur docker. Des services, qui vont \u00eatre lanc\u00e9 en parall\u00e8le du job. Param\u00e8tres utiles: When : Quand le job va \u00eatre d\u00e9clanch\u00e9 ? ex: on_success (par d\u00e9faut), on_failure, always, manual. branches : Sur quelle branche le job va \u00eatre d\u00e9clanch\u00e9. (D\u00e9faut: n'importes quels branches) only : Sur quel \u00e9v\u00e9nement le job va \u00eatre d\u00e9clanch\u00e9. ex: push, merge_request, tag. except : Sur quel \u00e9v\u00e9nement le job ne va pas \u00eatre d\u00e9clanch\u00e9. variable : Les variables d'environnement qui vont \u00eatre inject\u00e9es dans le job. Dans gitlab, on les retrouve dans Settings > CI/CD > Variables.","title":"Les Jobs"},{"location":"gitlab/#fichier-gitlabciyml","text":"L'ordre du stage est important. On vient d'abord d\u00e9clarer les stages: stages: - test - build - deploy Ensuite les jobs : Nom du job: stage: nom du stage (le premier (test)) image: nom de l'image docker script: - les commandes Ainsi de suite. On met le when a la fin","title":"Fichier .gitlab.ci.yml"},{"location":"gitlab/#cicd-continuous-integration-continuous-deployment","text":"Le Continuous Integration (CI), ou int\u00e9gration continue, est une pratique cl\u00e9 du DevOps qui vise \u00e0 automatiser l\u2019int\u00e9gration du code source dans un d\u00e9p\u00f4t central. \u00c0 chaque modification, le code est test\u00e9 et valid\u00e9 avant d\u2019\u00eatre fusionn\u00e9, garantissant ainsi une base de code toujours fonctionnelle. Fonctionnement du Continuous Integration L\u2019id\u00e9e du CI est simple : d\u00e8s qu\u2019un d\u00e9veloppeur apporte une modification au code, un processus automatis\u00e9 se d\u00e9clenche pour s\u2019assurer que tout fonctionne correctement. Ce processus comprend g\u00e9n\u00e9ralement : 1.R\u00e9cup\u00e9ration du code : V\u00e9rification des nouvelles modifications depuis le d\u00e9p\u00f4t Git. 2.Compilation et Build : Construction de l\u2019application pour s\u2019assurer qu\u2019elle est fonctionnelle. 3.Ex\u00e9cution des tests : Tests unitaires pour v\u00e9rifier les fonctionnalit\u00e9s isol\u00e9es. Tests d\u2019int\u00e9gration pour s\u2019assurer que les modules fonctionnent ensemble. Tests statiques (linting, analyse de s\u00e9curit\u00e9).x 4.Analyse du code : V\u00e9rification des standards de qualit\u00e9 (ex: SonarQube, ESLint, Pylint). 5.Rapport et feedback : Les r\u00e9sultats sont envoy\u00e9s aux d\u00e9veloppeurs (succ\u00e8s ou \u00e9chec). Test unitaires (Unit Tests) Tr\u00e8s rapide ! : Diff\u00e9rent cas de tests pour chaque fonction, cas bizarre qu\u2019il peut se passer. Ex : Fonction qui divise a par b, que se passe-t'il si a est un une lettre, si a est un 0, que retourne la fonction ?","title":"CI/CD (Continuous Integration / Continuous Deployment)"},{"location":"gra-pro/","text":"Prometeus et Grafana Contexte Monitoring et Alerting classique non adapt\u00e9 \u00e0 une infra cloud Agr\u00e9gation de statistique plus adapt\u00e9es Alerting sur indisponibilit\u00e9 au lieux de m\u00e9triques sp\u00e9cifiques (Fatigue des alertes) Pourquoi grafana et prometeus ? pull (vs push) cloud native (service discovery) tsdb (scale mieux vs sql) Agr\u00e9gation de m\u00e9triques M\u00eame language pour query, graphe et alertes (promQL) Plus adapt\u00e9 pour les infra dynamique/cloud native Comment ca marche ? Les app / serveurs exposent des metriques en http sur /metrics (valeur \u00e0 instant T) Prometheus peut d\u00e9couvrir les target (cibles) \u00e0 scrapper Prometheus les r\u00e9cup\u00e8re et les met dans sa base de donn\u00e9es On peut faire des requ\u00eates (promql) pour faire des graphes de ces donn\u00e9es (via UI, api or grafana par ex) On peut mettre en place des alertes quand ces m\u00e9triques d\u00e9passent un seuil (alert manager)","title":"Grafana/Prometeus"},{"location":"gra-pro/#prometeus-et-grafana","text":"","title":"Prometeus et Grafana"},{"location":"gra-pro/#contexte","text":"Monitoring et Alerting classique non adapt\u00e9 \u00e0 une infra cloud Agr\u00e9gation de statistique plus adapt\u00e9es Alerting sur indisponibilit\u00e9 au lieux de m\u00e9triques sp\u00e9cifiques (Fatigue des alertes)","title":"Contexte"},{"location":"gra-pro/#pourquoi-grafana-et-prometeus","text":"pull (vs push) cloud native (service discovery) tsdb (scale mieux vs sql) Agr\u00e9gation de m\u00e9triques M\u00eame language pour query, graphe et alertes (promQL) Plus adapt\u00e9 pour les infra dynamique/cloud native","title":"Pourquoi grafana et prometeus ?"},{"location":"gra-pro/#comment-ca-marche","text":"Les app / serveurs exposent des metriques en http sur /metrics (valeur \u00e0 instant T) Prometheus peut d\u00e9couvrir les target (cibles) \u00e0 scrapper Prometheus les r\u00e9cup\u00e8re et les met dans sa base de donn\u00e9es On peut faire des requ\u00eates (promql) pour faire des graphes de ces donn\u00e9es (via UI, api or grafana par ex) On peut mettre en place des alertes quand ces m\u00e9triques d\u00e9passent un seuil (alert manager)","title":"Comment ca marche ?"},{"location":"kubernetes/","text":"Kubernetes Pour comprendre Kubernetes, il faut d\u2019abord se poser une question simple : pourquoi a-t-on besoin d\u2019un orchestrateur de conteneurs ? La r\u00e9ponse r\u00e9side dans les d\u00e9fis modernes des infrastructures IT. Les syst\u00e8mes d\u2019aujourd\u2019hui sont de plus en plus complexes, compos\u00e9s de microservices r\u00e9partis sur des dizaines, voire des centaines de conteneurs. Kubernetes est con\u00e7u pour relever ces d\u00e9fis et rendre la gestion de ces environnements plus simple, fiable, et efficace. Avantages de kubernetes Scalabilit\u00e9, Disponibilit\u00e9, Observabilit\u00e9 D\u00e9ploiement","title":"Kubernetes"},{"location":"kubernetes/#kubernetes","text":"Pour comprendre Kubernetes, il faut d\u2019abord se poser une question simple : pourquoi a-t-on besoin d\u2019un orchestrateur de conteneurs ? La r\u00e9ponse r\u00e9side dans les d\u00e9fis modernes des infrastructures IT. Les syst\u00e8mes d\u2019aujourd\u2019hui sont de plus en plus complexes, compos\u00e9s de microservices r\u00e9partis sur des dizaines, voire des centaines de conteneurs. Kubernetes est con\u00e7u pour relever ces d\u00e9fis et rendre la gestion de ces environnements plus simple, fiable, et efficace.","title":"Kubernetes"},{"location":"kubernetes/#avantages-de-kubernetes","text":"Scalabilit\u00e9, Disponibilit\u00e9, Observabilit\u00e9 D\u00e9ploiement","title":"Avantages de kubernetes"},{"location":"workflowgit/","text":"Comprendre les diff\u00e9rents workflow Git No flow Tous les commits sur master (ex: projet perso, un seul contributeur) Git Flow A successful Git branching model \u00bb nvie.com moins adapt\u00e9 au CI/CD plus compliqu\u00e9 GitHub Flow githubflow Simplifi\u00e9 plus adapt\u00e9 au CI/CD GitLab Flow Introduction to GitLab Flow | GitLab","title":"WorkflowGit"},{"location":"workflowgit/#comprendre-les-differents-workflow-git","text":"No flow Tous les commits sur master (ex: projet perso, un seul contributeur) Git Flow A successful Git branching model \u00bb nvie.com moins adapt\u00e9 au CI/CD plus compliqu\u00e9 GitHub Flow githubflow Simplifi\u00e9 plus adapt\u00e9 au CI/CD GitLab Flow Introduction to GitLab Flow | GitLab","title":"Comprendre les diff\u00e9rents workflow Git"}]}
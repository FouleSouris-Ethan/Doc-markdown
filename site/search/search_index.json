{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Projet Cyna Introduction Ce site web \u00e9cris en markdown a pour but de documenter les r\u00e9alisations men\u00e9 durant le projet.","title":"Home"},{"location":"#projet-cyna","text":"","title":"Projet Cyna"},{"location":"#introduction","text":"Ce site web \u00e9cris en markdown a pour but de documenter les r\u00e9alisations men\u00e9 durant le projet.","title":"Introduction"},{"location":"about/","text":"Les bonnes pratiques de documentation Maintenir une documentation de haute qualit\u00e9 en DevOps n\u00e9cessite l\u2019adoption de bonnes pratiques. Voici des exemples issue de ce site . Maintenance r\u00e9guli\u00e8re La maintenance r\u00e9guli\u00e8re de la documentation est essentielle. Les syst\u00e8mes, les configurations et les processus en DevOps \u00e9voluent constamment. Il est donc indispensable de mettre \u00e0 jour la documentation pour refl\u00e9ter ces changements. Assignez la responsabilit\u00e9 de la mise \u00e0 jour de la documentation \u00e0 des membres de l\u2019\u00e9quipe afin de garantir que les informations restent \u00e0 jour. Pr\u00e9voyez des r\u00e9visions p\u00e9riodiques pour vous assurer que la documentation reste pr\u00e9cise. Utilisation de captures d\u2019\u00e9cran Les captures d\u2019\u00e9cran peuvent grandement am\u00e9liorer la compr\u00e9hension de la documentation. Lorsque vous d\u00e9crivez des interfaces utilisateur, des configurations ou des \u00e9tapes de processus, incluez des captures d\u2019\u00e9cran pour illustrer visuellement ce que vous d\u00e9crivez. Assurez-vous que les captures d\u2019\u00e9cran sont claires et bien annot\u00e9es pour que les lecteurs puissent les interpr\u00e9ter facilement. Feedback des utilisateurs Encouragez les utilisateurs de la documentation \u00e0 fournir des commentaires et des retours. Cr\u00e9ez des m\u00e9canismes de r\u00e9troaction, tels que des formulaires de commentaires ou des canaux de communication, pour que les utilisateurs puissent signaler des erreurs, poser des questions ou sugg\u00e9rer des am\u00e9liorations. Les retours des utilisateurs sont pr\u00e9cieux pour identifier les lacunes de la documentation et les domaines qui n\u00e9cessitent des clarifications. Normes de r\u00e9daction \u00c9tablissez des normes de r\u00e9daction pour maintenir la coh\u00e9rence dans votre documentation. D\u00e9finissez des directives sur la mani\u00e8re de nommer les sections, de formater le texte, d\u2019utiliser la terminologie et d\u2019autres aspects. Une documentation coh\u00e9rente est plus facile \u00e0 suivre et \u00e0 comprendre pour l\u2019ensemble de l\u2019\u00e9quipe. Automatisation de la g\u00e9n\u00e9ration de la documentation Si possible, automatisez la g\u00e9n\u00e9ration de la documentation avec MkDocs avec un pipeline CI/CD. Par exemple, configurez des scripts pour extraire automatiquement des informations \u00e0 partir de sources de donn\u00e9es, de syst\u00e8mes ou de fichiers de configuration pour les inclure dans la documentation. Cela r\u00e9duit la charge de travail manuelle et minimise les risques d\u2019erreur humaine.","title":"Bonnes-pratiques"},{"location":"about/#les-bonnes-pratiques-de-documentation","text":"Maintenir une documentation de haute qualit\u00e9 en DevOps n\u00e9cessite l\u2019adoption de bonnes pratiques. Voici des exemples issue de ce site .","title":"Les bonnes pratiques de documentation"},{"location":"about/#maintenance-reguliere","text":"La maintenance r\u00e9guli\u00e8re de la documentation est essentielle. Les syst\u00e8mes, les configurations et les processus en DevOps \u00e9voluent constamment. Il est donc indispensable de mettre \u00e0 jour la documentation pour refl\u00e9ter ces changements. Assignez la responsabilit\u00e9 de la mise \u00e0 jour de la documentation \u00e0 des membres de l\u2019\u00e9quipe afin de garantir que les informations restent \u00e0 jour. Pr\u00e9voyez des r\u00e9visions p\u00e9riodiques pour vous assurer que la documentation reste pr\u00e9cise.","title":"Maintenance r\u00e9guli\u00e8re"},{"location":"about/#utilisation-de-captures-decran","text":"Les captures d\u2019\u00e9cran peuvent grandement am\u00e9liorer la compr\u00e9hension de la documentation. Lorsque vous d\u00e9crivez des interfaces utilisateur, des configurations ou des \u00e9tapes de processus, incluez des captures d\u2019\u00e9cran pour illustrer visuellement ce que vous d\u00e9crivez. Assurez-vous que les captures d\u2019\u00e9cran sont claires et bien annot\u00e9es pour que les lecteurs puissent les interpr\u00e9ter facilement.","title":"Utilisation de captures d\u2019\u00e9cran"},{"location":"about/#feedback-des-utilisateurs","text":"Encouragez les utilisateurs de la documentation \u00e0 fournir des commentaires et des retours. Cr\u00e9ez des m\u00e9canismes de r\u00e9troaction, tels que des formulaires de commentaires ou des canaux de communication, pour que les utilisateurs puissent signaler des erreurs, poser des questions ou sugg\u00e9rer des am\u00e9liorations. Les retours des utilisateurs sont pr\u00e9cieux pour identifier les lacunes de la documentation et les domaines qui n\u00e9cessitent des clarifications.","title":"Feedback des utilisateurs"},{"location":"about/#normes-de-redaction","text":"\u00c9tablissez des normes de r\u00e9daction pour maintenir la coh\u00e9rence dans votre documentation. D\u00e9finissez des directives sur la mani\u00e8re de nommer les sections, de formater le texte, d\u2019utiliser la terminologie et d\u2019autres aspects. Une documentation coh\u00e9rente est plus facile \u00e0 suivre et \u00e0 comprendre pour l\u2019ensemble de l\u2019\u00e9quipe.","title":"Normes de r\u00e9daction"},{"location":"about/#automatisation-de-la-generation-de-la-documentation","text":"Si possible, automatisez la g\u00e9n\u00e9ration de la documentation avec MkDocs avec un pipeline CI/CD. Par exemple, configurez des scripts pour extraire automatiquement des informations \u00e0 partir de sources de donn\u00e9es, de syst\u00e8mes ou de fichiers de configuration pour les inclure dans la documentation. Cela r\u00e9duit la charge de travail manuelle et minimise les risques d\u2019erreur humaine.","title":"Automatisation de la g\u00e9n\u00e9ration de la documentation"},{"location":"devsecops/","text":"Outils pour DevSecOps Outils de surveillance et de gestion des vuln\u00e9rabilit\u00e9s : Snyk : Aide \u00e0 d\u00e9tecter et \u00e0 corriger les vuln\u00e9rabilit\u00e9s dans les d\u00e9pendances open-source et les conteneurs. Aqua Security : Sp\u00e9cialis\u00e9 dans la s\u00e9curit\u00e9 des conteneurs et des environnements cloud-native. Outils de s\u00e9curit\u00e9 des conteneurs : Docker Bench for Security : Un script qui v\u00e9rifie les bonnes pratiques de s\u00e9curit\u00e9 pour les d\u00e9ploiements Docker. Kubernetes Security Posture Management (KSPM) : Outils comme Aqua Security qui surveillent et s\u00e9curisent les clusters Kubernetes. Outils de tests de s\u00e9curit\u00e9 int\u00e9gr\u00e9s : OWASP ZAP : Un outil open-source pour trouver les vuln\u00e9rabilit\u00e9s de s\u00e9curit\u00e9 dans les applications web. SonarQube : Effectue des analyses de code statiques pour d\u00e9tecter les bugs, les vuln\u00e9rabilit\u00e9s et les dettes techniques.","title":"DevSecOps"},{"location":"devsecops/#outils-pour-devsecops","text":"","title":"Outils pour DevSecOps"},{"location":"devsecops/#outils-de-surveillance-et-de-gestion-des-vulnerabilites","text":"Snyk : Aide \u00e0 d\u00e9tecter et \u00e0 corriger les vuln\u00e9rabilit\u00e9s dans les d\u00e9pendances open-source et les conteneurs. Aqua Security : Sp\u00e9cialis\u00e9 dans la s\u00e9curit\u00e9 des conteneurs et des environnements cloud-native.","title":"Outils de surveillance et de gestion des vuln\u00e9rabilit\u00e9s :"},{"location":"devsecops/#outils-de-securite-des-conteneurs","text":"Docker Bench for Security : Un script qui v\u00e9rifie les bonnes pratiques de s\u00e9curit\u00e9 pour les d\u00e9ploiements Docker. Kubernetes Security Posture Management (KSPM) : Outils comme Aqua Security qui surveillent et s\u00e9curisent les clusters Kubernetes.","title":"Outils de s\u00e9curit\u00e9 des conteneurs :"},{"location":"devsecops/#outils-de-tests-de-securite-integres","text":"OWASP ZAP : Un outil open-source pour trouver les vuln\u00e9rabilit\u00e9s de s\u00e9curit\u00e9 dans les applications web. SonarQube : Effectue des analyses de code statiques pour d\u00e9tecter les bugs, les vuln\u00e9rabilit\u00e9s et les dettes techniques.","title":"Outils de tests de s\u00e9curit\u00e9 int\u00e9gr\u00e9s :"},{"location":"gitlab/","text":"Doc pour Gitlab Note a moi m\u00eame: Premier repos avec pipeline du sysadmin/devOps pour cr\u00e9er et g\u00e9rer l'infrastructure avec terreform/ansible par exemple. Les devs vont ensuite d\u00e9ployer leurs applis sur un autre repos en pipeline sur l'infra. Cr\u00e9ation de compte GitLab ici Le pipeline est d\u00e9crit dans le fichier .gitlab-ci.yml , dans le repo, il contient des stages, qui contiennent eux des jobs. Runners : Serveurs qui vont servir a ex\u00e9cuter les pipelines. Les artifacts : Un artifact peut contenir des fichiers et/ou dossiers qui vont \u00eatre stock\u00e9s au sein des pipelines pour \u00eatre utilis\u00e9 par d\u2019autres taches. Les Jobs T\u00e2ches qui vont \u00eatre ex\u00e9cut\u00e9es en parall\u00e8le dans un stage . On retrouve dans un job: Des images docker appropri\u00e9es pour chaque job. Des scripts (commandes) qui vont \u00eatre ex\u00e9cut\u00e9es dans le conteneur docker. Des services, qui vont \u00eatre lanc\u00e9 en parall\u00e8le du job. Param\u00e8tres utiles: When : Quand le job va \u00eatre d\u00e9clanch\u00e9 ? ex: on_success (par d\u00e9faut), on_failure, always, manual. branches : Sur quelle branche le job va \u00eatre d\u00e9clanch\u00e9. (D\u00e9faut: n'importes quels branches) only : Sur quel \u00e9v\u00e9nement le job va \u00eatre d\u00e9clanch\u00e9. ex: push, merge_request, tag. except : Sur quel \u00e9v\u00e9nement le job ne va pas \u00eatre d\u00e9clanch\u00e9. variable : Les variables d'environnement qui vont \u00eatre inject\u00e9es dans le job. Dans gitlab, on les retrouve dans Settings > CI/CD > Variables. Fichier .gitlab.ci.yml L'ordre du stage est important. On vient d'abord d\u00e9clarer les stages: stages: - test - build - deploy Ensuite les jobs : Nom du job: stage: nom du stage (le premier (test)) image: nom de l'image docker script: - les commandes Ainsi de suite. On met le when a la fin CI/CD (Continuous Integration / Continuous Deployment) Le Continuous Integration (CI), ou int\u00e9gration continue, est une pratique cl\u00e9 du DevOps qui vise \u00e0 automatiser l\u2019int\u00e9gration du code source dans un d\u00e9p\u00f4t central. \u00c0 chaque modification, le code est test\u00e9 et valid\u00e9 avant d\u2019\u00eatre fusionn\u00e9, garantissant ainsi une base de code toujours fonctionnelle. Fonctionnement du Continuous Integration L\u2019id\u00e9e du CI est simple : d\u00e8s qu\u2019un d\u00e9veloppeur apporte une modification au code, un processus automatis\u00e9 se d\u00e9clenche pour s\u2019assurer que tout fonctionne correctement. Ce processus comprend g\u00e9n\u00e9ralement : 1.R\u00e9cup\u00e9ration du code : V\u00e9rification des nouvelles modifications depuis le d\u00e9p\u00f4t Git. 2.Compilation et Build : Construction de l\u2019application pour s\u2019assurer qu\u2019elle est fonctionnelle. 3.Ex\u00e9cution des tests : Tests unitaires pour v\u00e9rifier les fonctionnalit\u00e9s isol\u00e9es. Tests d\u2019int\u00e9gration pour s\u2019assurer que les modules fonctionnent ensemble. Tests statiques (linting, analyse de s\u00e9curit\u00e9).x 4.Analyse du code : V\u00e9rification des standards de qualit\u00e9 (ex: SonarQube, ESLint, Pylint). 5.Rapport et feedback : Les r\u00e9sultats sont envoy\u00e9s aux d\u00e9veloppeurs (succ\u00e8s ou \u00e9chec). Test unitaires (Unit Tests) Tr\u00e8s rapide ! : Diff\u00e9rent cas de tests pour chaque fonction, cas bizarre qu\u2019il peut se passer. Ex : Fonction qui divise a par b, que se passe-t'il si a est un une lettre, si a est un 0, que retourne la fonction ?","title":"Gitlab"},{"location":"gitlab/#doc-pour-gitlab","text":"Note a moi m\u00eame: Premier repos avec pipeline du sysadmin/devOps pour cr\u00e9er et g\u00e9rer l'infrastructure avec terreform/ansible par exemple. Les devs vont ensuite d\u00e9ployer leurs applis sur un autre repos en pipeline sur l'infra. Cr\u00e9ation de compte GitLab ici Le pipeline est d\u00e9crit dans le fichier .gitlab-ci.yml , dans le repo, il contient des stages, qui contiennent eux des jobs. Runners : Serveurs qui vont servir a ex\u00e9cuter les pipelines. Les artifacts : Un artifact peut contenir des fichiers et/ou dossiers qui vont \u00eatre stock\u00e9s au sein des pipelines pour \u00eatre utilis\u00e9 par d\u2019autres taches.","title":"Doc pour Gitlab"},{"location":"gitlab/#les-jobs","text":"T\u00e2ches qui vont \u00eatre ex\u00e9cut\u00e9es en parall\u00e8le dans un stage . On retrouve dans un job: Des images docker appropri\u00e9es pour chaque job. Des scripts (commandes) qui vont \u00eatre ex\u00e9cut\u00e9es dans le conteneur docker. Des services, qui vont \u00eatre lanc\u00e9 en parall\u00e8le du job. Param\u00e8tres utiles: When : Quand le job va \u00eatre d\u00e9clanch\u00e9 ? ex: on_success (par d\u00e9faut), on_failure, always, manual. branches : Sur quelle branche le job va \u00eatre d\u00e9clanch\u00e9. (D\u00e9faut: n'importes quels branches) only : Sur quel \u00e9v\u00e9nement le job va \u00eatre d\u00e9clanch\u00e9. ex: push, merge_request, tag. except : Sur quel \u00e9v\u00e9nement le job ne va pas \u00eatre d\u00e9clanch\u00e9. variable : Les variables d'environnement qui vont \u00eatre inject\u00e9es dans le job. Dans gitlab, on les retrouve dans Settings > CI/CD > Variables.","title":"Les Jobs"},{"location":"gitlab/#fichier-gitlabciyml","text":"L'ordre du stage est important. On vient d'abord d\u00e9clarer les stages: stages: - test - build - deploy Ensuite les jobs : Nom du job: stage: nom du stage (le premier (test)) image: nom de l'image docker script: - les commandes Ainsi de suite. On met le when a la fin","title":"Fichier .gitlab.ci.yml"},{"location":"gitlab/#cicd-continuous-integration-continuous-deployment","text":"Le Continuous Integration (CI), ou int\u00e9gration continue, est une pratique cl\u00e9 du DevOps qui vise \u00e0 automatiser l\u2019int\u00e9gration du code source dans un d\u00e9p\u00f4t central. \u00c0 chaque modification, le code est test\u00e9 et valid\u00e9 avant d\u2019\u00eatre fusionn\u00e9, garantissant ainsi une base de code toujours fonctionnelle. Fonctionnement du Continuous Integration L\u2019id\u00e9e du CI est simple : d\u00e8s qu\u2019un d\u00e9veloppeur apporte une modification au code, un processus automatis\u00e9 se d\u00e9clenche pour s\u2019assurer que tout fonctionne correctement. Ce processus comprend g\u00e9n\u00e9ralement : 1.R\u00e9cup\u00e9ration du code : V\u00e9rification des nouvelles modifications depuis le d\u00e9p\u00f4t Git. 2.Compilation et Build : Construction de l\u2019application pour s\u2019assurer qu\u2019elle est fonctionnelle. 3.Ex\u00e9cution des tests : Tests unitaires pour v\u00e9rifier les fonctionnalit\u00e9s isol\u00e9es. Tests d\u2019int\u00e9gration pour s\u2019assurer que les modules fonctionnent ensemble. Tests statiques (linting, analyse de s\u00e9curit\u00e9).x 4.Analyse du code : V\u00e9rification des standards de qualit\u00e9 (ex: SonarQube, ESLint, Pylint). 5.Rapport et feedback : Les r\u00e9sultats sont envoy\u00e9s aux d\u00e9veloppeurs (succ\u00e8s ou \u00e9chec). Test unitaires (Unit Tests) Tr\u00e8s rapide ! : Diff\u00e9rent cas de tests pour chaque fonction, cas bizarre qu\u2019il peut se passer. Ex : Fonction qui divise a par b, que se passe-t'il si a est un une lettre, si a est un 0, que retourne la fonction ?","title":"CI/CD (Continuous Integration / Continuous Deployment)"},{"location":"workflowgit/","text":"Comprendre les diff\u00e9rents workflow Git No flow Tous les commits sur master (ex: projet perso, un seul contributeur) Git Flow A successful Git branching model \u00bb nvie.com moins adapt\u00e9 au CI/CD plus compliqu\u00e9 GitHub Flow githubflow Simplifi\u00e9 plus adapt\u00e9 au CI/CD GitLab Flow Introduction to GitLab Flow | GitLab","title":"WorkflowGit"},{"location":"workflowgit/#comprendre-les-differents-workflow-git","text":"No flow Tous les commits sur master (ex: projet perso, un seul contributeur) Git Flow A successful Git branching model \u00bb nvie.com moins adapt\u00e9 au CI/CD plus compliqu\u00e9 GitHub Flow githubflow Simplifi\u00e9 plus adapt\u00e9 au CI/CD GitLab Flow Introduction to GitLab Flow | GitLab","title":"Comprendre les diff\u00e9rents workflow Git"}]}